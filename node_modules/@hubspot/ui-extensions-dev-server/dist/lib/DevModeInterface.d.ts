import type { ExtensionConfig, Logger, PlatformVersion, ProjectComponentMap } from './types';
import { PromptModule } from 'inquirer';
import { DevServerState } from './DevServerState';
interface SetupArguments {
    components: ProjectComponentMap;
    extensionConfig?: ExtensionConfig;
    onUploadRequired?: VoidFunction;
    promptUser: PromptModule;
    logger: Logger;
    urls: {
        api: string;
        web: string;
    };
}
interface ProjectConfig {
    name: string;
    srcDir: string;
    platformVersion?: PlatformVersion;
}
interface StartArguments {
    accountId?: number;
    requestPorts?: (requestPortsData: Array<{
        instanceId: string;
        port?: number;
    }>) => Promise<{
        [instanceId: string]: number;
    }>;
    projectConfig?: ProjectConfig;
}
interface AppExtensionMapping {
    name: string;
    value: ExtensionConfig;
}
declare class DevModeInterface {
    configs?: ExtensionConfig[];
    devServerState?: DevServerState;
    onUploadRequired?: VoidFunction;
    shutdown?: () => Promise<void>;
    logger: Logger;
    urls?: SetupArguments['urls'];
    _generateAppExtensionMappings(components: ProjectComponentMap): AppExtensionMapping[];
    _getPlatformVersion(projectConfig?: ProjectConfig): PlatformVersion;
    setup({ components, extensionConfig, onUploadRequired, promptUser, logger, urls, }: SetupArguments): Promise<void>;
    fileChange(filePath: string, __event: unknown): Promise<void>;
    start({ requestPorts, accountId, projectConfig }: StartArguments): Promise<void>;
    cleanup(): Promise<void>;
}
declare const _default: DevModeInterface;
export default _default;
