"use strict";
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const ast_1 = require("../ast");
const codeBlockingPlugin = ({ logger }) => {
    return {
        name: 'ui-extensions-code-blocking-plugin',
        enforce: 'post',
        transform(code, filename) {
            if ((0, utils_1.isNodeModule)(filename)) {
                return { code, map: null }; // We don't want to parse node modules
            }
            let sourceCodeMetadata = { functions: {} };
            const requireFunctionName = 'require';
            try {
                //  Not sure why the types don't match for this.parse and the Rollup docs, but
                // the docs over on rollup's site specify ESTree.Program as the return type,
                // and the underlying data matches that https://rollupjs.org/plugin-development/#this-parse
                const abstractSyntaxTree = this.parse(code);
                sourceCodeMetadata = (0, ast_1.traverseAbstractSyntaxTree)(abstractSyntaxTree, [
                    { functionName: requireFunctionName },
                ]);
            }
            catch (e) {
                logger.debug('Unable to parse and traverse source code');
                return { code, map: null };
            }
            if (sourceCodeMetadata.functions[requireFunctionName] &&
                sourceCodeMetadata.functions[requireFunctionName].scope === 'Global') {
                logger.warn('require statements are not supported, replace require statements with import');
            }
            return { code, map: null };
        },
    };
};
exports.default = codeBlockingPlugin;
