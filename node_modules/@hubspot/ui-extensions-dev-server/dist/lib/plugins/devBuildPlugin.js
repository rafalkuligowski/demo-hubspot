"use strict";
/* hs-eslint ignored failing-rules */
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const vite_1 = require("vite");
const manifestPlugin_1 = __importDefault(require("./manifestPlugin"));
const utils_1 = require("../utils");
const codeCheckingPlugin_1 = __importDefault(require("./codeCheckingPlugin"));
const path_1 = __importDefault(require("path"));
const friendlyLoggingPlugin_1 = __importDefault(require("./friendlyLoggingPlugin"));
const relevantModulesPlugin_1 = __importStar(require("./relevantModulesPlugin"));
const codeBlockingPlugin_1 = __importDefault(require("./codeBlockingPlugin"));
function addVersionToBaseMessage(baseMessage) {
    return Object.assign(Object.assign({}, baseMessage), { version: constants_1.WEBSOCKET_MESSAGE_VERSION });
}
const devBuildPlugin = (options) => {
    const { devServerState } = options;
    const { logger } = devServerState;
    let lastBuildErrorContext;
    const handleBuildError = (error, server) => {
        const { error: { plugin, errors, frame, loc, id }, extensionMetadata, } = error;
        // Filter out our custom plugins, but send everything else
        if (!(plugin === null || plugin === void 0 ? void 0 : plugin.startsWith('ui-extensions'))) {
            // @ts-expect-error Our websocket messages don't match Vite format
            server.ws.send(Object.assign(Object.assign({}, addVersionToBaseMessage(extensionMetadata.baseMessage)), { event: 'error', error: {
                    details: {
                        errors,
                        formattedError: (0, utils_1.stripAnsiColorCodes)(frame),
                        location: loc,
                        file: id,
                    },
                } }));
        }
    };
    const devBuild = (server, extensionMetadata, emptyOutDir = false) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const { config: extensionConfig } = extensionMetadata;
            yield (0, vite_1.build)({
                logLevel: 'warn',
                mode: 'development',
                define: {
                    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development'),
                },
                esbuild: {
                    tsconfigRaw: {
                        compilerOptions: {
                            preserveValueImports: true,
                        },
                    },
                },
                build: {
                    lib: {
                        entry: extensionConfig.data.module.file,
                        name: extensionConfig.output,
                        formats: ['iife'],
                        fileName: () => extensionConfig.output,
                    },
                    rollupOptions: Object.assign(Object.assign({}, constants_1.ROLLUP_OPTIONS), { plugins: [
                            (0, manifestPlugin_1.default)({
                                minify: false,
                                output: extensionConfig.output,
                                extensionPath: extensionConfig.extensionPath,
                            }),
                            (0, codeCheckingPlugin_1.default)({
                                output: path_1.default.join(devServerState.outputDir, extensionConfig.output),
                                logger,
                            }),
                            (0, friendlyLoggingPlugin_1.default)({ logger }),
                            (0, relevantModulesPlugin_1.default)({
                                output: extensionConfig.output,
                                logger,
                            }),
                            (0, codeBlockingPlugin_1.default)({ logger }),
                        ], output: Object.assign(Object.assign({}, constants_1.ROLLUP_OPTIONS.output), { sourcemap: 'inline' }) }),
                    outDir: devServerState.outputDir,
                    emptyOutDir,
                    minify: false,
                },
                clearScreen: false,
            });
            lastBuildErrorContext = null;
            return true;
        }
        catch (error) {
            lastBuildErrorContext = {
                error: error,
                extensionMetadata,
            };
            logger.debug(error);
            handleBuildError(lastBuildErrorContext, server);
            return false;
        }
    });
    let localServer;
    return {
        name: 'ui-extensions-dev-build-plugin',
        enforce: 'pre',
        configureServer: (server) => __awaiter(void 0, void 0, void 0, function* () {
            // Store a reference to the server to be used in hooks that don't get the server injected
            // See https://vitejs.dev/guide/api-plugin.html#configureserver for information on this pattern
            localServer = server;
            localServer.ws.on('connection', () => {
                logger.info('Browser connected and listening for bundle updates');
                devServerState.extensionsMetadata.forEach((metadata) => {
                    // @ts-expect-error Our websocket messages don't match Vite format
                    localServer.ws.send(Object.assign(Object.assign({}, addVersionToBaseMessage(metadata.baseMessage)), { event: 'start' }));
                });
                if (lastBuildErrorContext) {
                    handleBuildError(lastBuildErrorContext, server);
                }
            });
            for (let i = 0; i < devServerState.extensionsMetadata.length; ++i) {
                yield devBuild(localServer, devServerState.extensionsMetadata[i], i === 0);
            }
        }),
        handleHotUpdate: ({ file, server }) => __awaiter(void 0, void 0, void 0, function* () {
            // If the file is not in the relevantModules list, it's update is inconsequential
            const extensionsToRebuild = devServerState.extensionsMetadata.filter((metadata) => {
                const { config } = metadata;
                return (0, relevantModulesPlugin_1.getRelevantModules)(config.output).includes(file);
            });
            for (let i = 0; i < extensionsToRebuild.length; ++i) {
                const toRebuild = extensionsToRebuild[i];
                const successful = yield devBuild(server, toRebuild);
                if (!successful) {
                    return [];
                }
                const { config: extensionConfig } = toRebuild;
                logger.info(`Extension ${extensionConfig.data.title} updated, compiled`);
                if (server.ws.clients.size === 0) {
                    logger.debug('Bundle updated, no browsers connected to notify');
                    return [];
                }
                logger.debug('Bundle updated, notifying connected browsers');
                // @ts-expect-error Our websocket messages don't match Vite format
                server.ws.send(Object.assign(Object.assign({}, addVersionToBaseMessage(toRebuild.baseMessage)), { event: 'update' }));
            }
            return [];
        }),
        buildEnd(error) {
            if (error) {
                logger.error(error);
            }
            if (localServer && localServer.ws) {
                logger.debug('Sending shutdown message to connected browsers');
                devServerState.extensionsMetadata.forEach((metadata) => {
                    // @ts-expect-error Our websocket messages don't match Vite format
                    localServer.ws.send(Object.assign(Object.assign({}, addVersionToBaseMessage(metadata.baseMessage)), { event: 'shutdown' }));
                });
            }
        },
    };
};
exports.default = devBuildPlugin;
