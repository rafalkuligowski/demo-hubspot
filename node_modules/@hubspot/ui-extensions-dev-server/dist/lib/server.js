"use strict";
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
/* eslint-disable no-unused-expressions */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const constants_1 = require("./constants");
const extensionsService_1 = __importDefault(require("./extensionsService"));
const app_functions_dev_server_1 = require("@hubspot/app-functions-dev-server");
function listen(app, port) {
    return new Promise((resolve, reject) => {
        const server = app
            .listen({ port }, () => {
            resolve(server);
        })
            .on('error', (err) => {
            reject(err);
        });
    });
}
function startDevServer({ devServerState, viteDevServer, }) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const app = (0, express_1.default)();
        // Setup middleware
        app.use((0, cors_1.default)());
        app.use(express_1.default.static(devServerState.outputDir));
        app.use('/api/crm-extensibility/execution/internal/v3', (0, app_functions_dev_server_1.AppFunctionExecutionService)(Object.assign(Object.assign({}, devServerState.functionsConfig), { logger: devServerState.logger })));
        devServerState.logger.info(`Serving app functions locally (platform version ${devServerState.functionsConfig.platformVersion})`);
        const endpointsAdded = extensionsService_1.default.add(app, devServerState, constants_1.SERVER_CAPABILITIES);
        const { expressPort } = devServerState;
        endpointsAdded.forEach((endpoint) => {
            devServerState.logger.debug(`Listening at http://hslocal.net:${expressPort}${endpoint}`);
        });
        // Vite middlewares needs to go last because it's greedy and will block other middleware
        app.use(viteDevServer.middlewares);
        let server;
        try {
            server = yield listen(app, devServerState.expressPort);
        }
        catch (e) {
            if (e.code === 'EADDRINUSE') {
                throw new Error(`Port ${devServerState.expressPort} is already in use.`);
            }
            throw new Error(e);
        }
        (_a = devServerState.extensionsMetadata) === null || _a === void 0 ? void 0 : _a.forEach((metadata) => {
            const { baseMessage } = metadata;
            devServerState.logger.debug(`Listening at ${baseMessage.callback}`);
        });
        return function shutdown() {
            return __awaiter(this, void 0, void 0, function* () {
                yield viteDevServer.pluginContainer.close();
                // Stop new connections to express server
                server.close(() => { });
                devServerState.logger.info('Extension dev server done cleaning up');
            });
        };
    });
}
exports.default = startDevServer;
