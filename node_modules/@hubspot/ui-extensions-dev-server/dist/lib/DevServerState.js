"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevServerState = void 0;
const constants_1 = require("./constants");
const path_1 = __importDefault(require("path"));
class DevServerState {
    constructor({ extensionConfigs, accountId, expressPort, webSocketPort, platformVersion, logger, urls, }) {
        if (!extensionConfigs) {
            throw new Error('Unable to load the required extension configuration files');
        }
        const extensionsMetadata = [];
        extensionConfigs.forEach((config) => {
            const { appName, title, sourceId } = config.data;
            extensionsMetadata.push({
                config,
                baseMessage: {
                    appName,
                    title,
                    sourceId,
                    callback: `http://hslocal.net:${expressPort}/${config.output}`,
                    portalId: accountId,
                },
            });
        });
        this._webSocketPort = webSocketPort;
        this._expressPort = expressPort;
        this._extensionsMetadata = extensionsMetadata;
        this._appPath = extensionConfigs[0].path;
        this._portalId = accountId;
        this._outputDir = path_1.default.join(this._appPath, constants_1.OUTPUT_DIR);
        // Pass options from the CLI for running app functions locally
        this._functionsConfig = {
            app: { path: this._appPath },
            accountId,
            platformVersion,
            hubspotApiOrigin: urls.api,
            hubspotWebsiteOrigin: urls.web,
        };
        this.logger = logger;
        Object.freeze(this);
    }
    get portalId() {
        return this._portalId;
    }
    get webSocketPort() {
        return this._webSocketPort;
    }
    get expressPort() {
        return this._expressPort;
    }
    get extensionsMetadata() {
        return this._extensionsMetadata;
    }
    get functionsConfig() {
        return this._functionsConfig;
    }
    get outputDir() {
        return this._outputDir;
    }
    get appPath() {
        return this._appPath;
    }
}
exports.DevServerState = DevServerState;
