"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwUnhandledPlatformVersionError = exports.UnhandledPlatformVersionError = exports.isNodeModule = exports.buildSourceId = exports.loadManifest = exports.stripAnsiColorCodes = exports.getUrlSafeFileName = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const constants_1 = require("./constants");
function getUrlSafeFileName(filePath) {
    const { name } = path_1.default.parse(filePath);
    return encodeURIComponent(`${name}.js`);
}
exports.getUrlSafeFileName = getUrlSafeFileName;
// Strips ANSI color codes out of strings because we don't want to pass them to the browser
function stripAnsiColorCodes(stringWithColorCodes) {
    if (!stringWithColorCodes) {
        return null;
    }
    return stringWithColorCodes.replace(
    // eslint-disable-next-line no-control-regex
    /[\u001b][[]*([0-9]{1,4};?)*[m]/g, '');
}
exports.stripAnsiColorCodes = stripAnsiColorCodes;
function loadManifest(outputDir, output) {
    try {
        return JSON.parse(fs_1.default
            .readFileSync(path_1.default.join(outputDir, `${output}-${constants_1.MANIFEST_FILE}`))
            .toString());
    }
    catch (e) {
        return {};
    }
}
exports.loadManifest = loadManifest;
function buildSourceId(appConfig, extensionConfig) {
    if (appConfig.uid && extensionConfig.uid) {
        return `${appConfig.uid}::${extensionConfig.uid}`;
    }
    return null;
}
exports.buildSourceId = buildSourceId;
function isNodeModule(filepath) {
    if (!filepath) {
        return false;
    }
    const directory = path_1.default.parse(filepath).dir;
    return directory.includes('node_modules');
}
exports.isNodeModule = isNodeModule;
class UnhandledPlatformVersionError extends Error {
    constructor(platformVersion) {
        super(`Unsupported platform version "${platformVersion}"`);
    }
}
exports.UnhandledPlatformVersionError = UnhandledPlatformVersionError;
function throwUnhandledPlatformVersionError(platformVersion) {
    throw new UnhandledPlatformVersionError(platformVersion);
}
exports.throwUnhandledPlatformVersionError = throwUnhandledPlatformVersionError;
