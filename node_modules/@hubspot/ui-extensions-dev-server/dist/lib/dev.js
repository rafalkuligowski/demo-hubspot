"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDevMode = void 0;
const vite_1 = require("vite");
const path_1 = __importDefault(require("path"));
const server_1 = __importDefault(require("./server"));
const devBuildPlugin_1 = __importDefault(require("./plugins/devBuildPlugin"));
// @ts-expect-error no type defs
const detect_port_1 = __importDefault(require("detect-port"));
function _createViteDevServer(devServerState) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, vite_1.createServer)({
            root: devServerState.appPath,
            logLevel: 'silent',
            appType: 'custom',
            mode: 'development',
            server: {
                middlewareMode: true,
                hmr: {
                    port: devServerState.webSocketPort,
                },
                watch: {
                    ignored: [
                        path_1.default.join(devServerState.outputDir, '/**/*'),
                        '**/src/app/app.functions/**/*',
                        '**/app.json',
                        '**/package.json',
                        '**/package-lock.json',
                    ],
                },
            },
            plugins: [
                (0, devBuildPlugin_1.default)({
                    devServerState,
                }),
            ],
            clearScreen: false,
        });
    });
}
function throwIfPortTaken(port) {
    return __awaiter(this, void 0, void 0, function* () {
        // detect takes a port and returns the next available port
        // so a mismatch means the requested port was not available
        if ((yield (0, detect_port_1.default)(port)) !== port) {
            throw new Error(`Unable to start because port ${port} is already in use`);
        }
    });
}
function startDevMode(devServerState) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!devServerState || !devServerState.extensionsMetadata) {
            throw new Error('Unable to determine which extension to run');
        }
        yield throwIfPortTaken(devServerState.webSocketPort);
        const viteDevServer = yield _createViteDevServer(devServerState);
        const shutdownServer = yield (0, server_1.default)({
            devServerState,
            viteDevServer,
        });
        return shutdownServer;
    });
}
exports.startDevMode = startDevMode;
