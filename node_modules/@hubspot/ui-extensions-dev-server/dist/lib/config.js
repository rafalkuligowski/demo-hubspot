"use strict";
/* hs-eslint ignored failing-rules */
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadExtensionConfig = exports.loadConfigByPath = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
function loadConfigByPath(configPath) {
    const source = fs_1.default.readFileSync(configPath).toString();
    return JSON.parse(source);
}
exports.loadConfigByPath = loadConfigByPath;
function loadExtensionConfig(appConfig, appPath) {
    var _a, _b;
    const crmCardsSubConfigFiles = (_b = (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.extensions) === null || _a === void 0 ? void 0 : _a.crm) === null || _b === void 0 ? void 0 : _b.cards;
    const outputConfig = {};
    crmCardsSubConfigFiles.forEach((card) => {
        var _a, _b;
        const cardConfigPath = path_1.default.join(appPath, card.file);
        try {
            const cardConfig = loadConfigByPath(cardConfigPath);
            if (cardConfig && cardConfig.data) {
                const cardConfigDir = path_1.default.parse(cardConfigPath).dir;
                const entryPointPath = path_1.default.join(cardConfigDir, (_b = (_a = cardConfig.data) === null || _a === void 0 ? void 0 : _a.module) === null || _b === void 0 ? void 0 : _b.file);
                cardConfig.data.module.file = entryPointPath;
                const sourceId = (0, utils_1.buildSourceId)(appConfig, cardConfig);
                outputConfig[sourceId || `${entryPointPath}-${cardConfig.data.location}`] = Object.assign(Object.assign({}, cardConfig), { output: (0, utils_1.getUrlSafeFileName)(entryPointPath), path: appPath, extensionPath: path_1.default.parse(entryPointPath).dir, extensionConfigPath: cardConfigPath, data: Object.assign(Object.assign({}, cardConfig.data), { appName: appConfig.name, sourceId }) });
            }
        }
        catch (e) {
            throw new Error(`Unable to load ${cardConfigPath}`);
        }
    });
    return outputConfig;
}
exports.loadExtensionConfig = loadExtensionConfig;
