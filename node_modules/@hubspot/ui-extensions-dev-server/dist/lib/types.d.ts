import { PLATFORM_VERSION } from './constants';
export interface ObjectTypes {
    name: string;
}
export interface ExtensionConfig {
    type: string;
    output: string;
    path: string;
    extensionPath: string;
    extensionConfigPath: string;
    data: {
        appName: string;
        title: string;
        location: string;
        module: {
            file: string;
        };
        objectTypes: ObjectTypes[];
        sourceId?: string | null;
    };
    uid?: string;
}
export interface ExtensionConfigMap {
    [key: string]: ExtensionConfig;
}
interface CardConfig {
    file: string;
}
export interface AppConfig {
    name: string;
    description: string;
    scopes: string[];
    public: boolean;
    extensions: {
        crm: {
            cards: CardConfig[];
        };
    };
    uid?: string;
}
export interface ProjectComponent {
    config: AppConfig;
    path: string;
}
export interface ProjectComponentMap {
    [key: string]: ProjectComponent;
}
export interface BaseMessage {
    appName: string;
    title: string;
    callback: string;
    sourceId?: string | null;
    portalId?: number;
}
export interface ExtensionMetadata {
    baseMessage: BaseMessage;
    config: ExtensionConfig;
}
export type PlatformVersion = (typeof PLATFORM_VERSION)[keyof typeof PLATFORM_VERSION];
export interface FunctionMetadata {
    scope?: 'Global' | 'Local';
    defined?: boolean;
    invoked?: boolean;
}
export interface SourceCodeMetadata {
    functions: {
        [functionName: string]: FunctionMetadata;
    };
}
export interface FunctionInvocationCheck {
    functionName: string;
}
export type SourceCodeChecks = FunctionInvocationCheck[];
export interface Logger {
    info: (...args: any[]) => void;
    debug: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
}
export {};
