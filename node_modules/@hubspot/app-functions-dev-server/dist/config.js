"use strict";
/* hs-eslint ignored failing-rules */
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildServiceConfiguration = exports.loadFunctionInfo = exports.loadMultiFunctionInfo = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
const errors_1 = require("./errors");
function loadMultiFunctionInfo(config) {
    const srcDir = path_1.default.join(config.app.path, constants_1.APP_FUNCTIONS_DIRNAME);
    if (!fs_1.default.existsSync(srcDir)) {
        throw new Error(`Cannot locate app function directory: ${srcDir}`);
    }
    const stats = fs_1.default.lstatSync(srcDir);
    if (!stats.isDirectory()) {
        throw new Error(`Invalid app function directory: ${srcDir}`);
    }
    const manifestPath = path_1.default.join(srcDir, constants_1.APP_FUNCTIONS_MANIFEST_FILENAME);
    const manifest = JSON.parse(fs_1.default.readFileSync(manifestPath, {
        encoding: 'utf-8',
    }));
    const { appFunctions = {} } = manifest;
    // TODO validation
    return { appFunctions, srcDir };
}
exports.loadMultiFunctionInfo = loadMultiFunctionInfo;
function loadFunctionInfo(config, functionName, appId) {
    const { logger } = config;
    const { appFunctions, srcDir } = loadMultiFunctionInfo(config);
    const metadata = appFunctions[functionName];
    if (!metadata) {
        const manifestPath = path_1.default.join(srcDir, constants_1.APP_FUNCTIONS_MANIFEST_FILENAME);
        logger.error(`App function "${functionName}" is not declared in ${manifestPath}`);
        throw new errors_1.ExecutionError({
            reason: errors_1.Reason.FunctionNotFound,
            functionName,
            appId,
        });
    }
    // TODO validation
    return Object.assign(Object.assign({}, metadata), { srcDir, name: functionName });
}
exports.loadFunctionInfo = loadFunctionInfo;
function buildServiceConfiguration(appPath, options) {
    var _a, _b, _c;
    return {
        accountId: options.accountId,
        app: { path: appPath },
        functionTimeoutMs: (_a = options.functionTimeoutMs) !== null && _a !== void 0 ? _a : constants_1.EXECUTION_TIMEOUT_MS,
        hubspotApiOrigin: options.hubspotApiOrigin,
        hubspotWebsiteOrigin: options.hubspotWebsiteOrigin,
        logger: (_b = options.logger) !== null && _b !== void 0 ? _b : console,
        platformVersion: (_c = options.platformVersion) !== null && _c !== void 0 ? _c : constants_1.PLATFORM_VERSION.V20231,
    };
}
exports.buildServiceConfiguration = buildServiceConfiguration;
//# sourceMappingURL=config.js.map