export declare const Reason: {
    readonly Timeout: "TIMEOUT";
    readonly UncaughtError: "UNCAUGHT_ERROR";
    readonly InvalidResponse: "INVALID_RESPONSE";
    readonly InvalidFunction: "INVALID_FUNCTION";
    readonly FunctionNotFound: "FUNCTION_NOT_FOUND";
};
type Reason = (typeof Reason)[keyof typeof Reason];
export declare class ExecutionError extends Error {
    details: ErrorDetails;
    reason?: Reason;
    cause?: unknown;
    constructor(details: ErrorDetails);
}
interface ErrorDetails {
    reason: Reason;
    functionName: string;
    appId?: number;
    elapsedTimeMs?: number;
    cause?: unknown;
}
export declare function buildBadRequestBody({ details }: ExecutionError): {
    status: string;
    message: string;
    correlationId: string;
    errors: {
        subCategory: string;
        message: string;
        context: {
            exception: string[];
            logId: string[];
            appFunctionLogId: string[];
            serverlessFunction: string[];
        };
    }[];
    category: string;
    subCategory: string;
};
export declare function buildInternalErrorBody(): {
    status: string;
    message: string;
    correlationId: string;
};
export {};
