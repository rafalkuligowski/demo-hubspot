"use strict";
/* hs-eslint ignored failing-rules */
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildContext = exports.fetchObjectContext = void 0;
const api_client_1 = require("@hubspot/api-client");
const types_1 = require("./types");
const utils_1 = require("./utils");
function fetchObjectContext(config, objectQuery, accessToken) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (!objectQuery) {
            return {};
        }
        const { logger, accountId } = config;
        const { objectId, objectTypeId, objectPropertyNames } = objectQuery;
        const propertyNames = objectPropertyNames.filter((field) => field);
        if (propertyNames.length === 0) {
            return {};
        }
        if (!accessToken) {
            const errorMessage = `Cannot fetch CRM object properties without a HubSpot API access token. This is not a problem with your code. Please copy the access token for your app at ${config.hubspotWebsiteOrigin}/private-apps/${accountId} and save it in an '.env' file in the 'app.functions' folder. For more details, please see ${config.hubspotWebsiteOrigin}/docs/${accountId}/doc/platform/serverless-functions.`;
            throw new Error(errorMessage);
        }
        let object;
        try {
            object = yield getCrmObjectByHubSpotApiClient(accessToken, config.hubspotApiOrigin, objectTypeId, objectId, propertyNames);
            logger.debug(`Successfully fetched CRM object properties with objectTypeId~${objectTypeId} objectId~${objectId} accountId~${accountId}:`, object === null || object === void 0 ? void 0 : object.properties);
        }
        catch (err) {
            if ((0, types_1.isApiException)(err) && isMaybeWrongAccessToken(err)) {
                logger.debug(`HubSpot API error:\n${err.message}`);
                throw new Error(`Failed to fetch CRM object properties with objectTypeId~${objectTypeId} objectId~${objectId} accountId~${accountId}. Please check that the PRIVATE_APP_ACCESS_TOKEN specified in your '.env' file matches that of your app at ${config.hubspotWebsiteOrigin}/private-apps/${accountId}.`);
            }
            throw new Error(`Failed to fetch CRM object properties with objectTypeId~${objectTypeId} objectId~${objectId} accountId~${accountId}: ${err}`);
        }
        const propertiesToSend = (0, utils_1.filterMap)((_a = object === null || object === void 0 ? void 0 : object.properties) !== null && _a !== void 0 ? _a : {}, objectPropertyNames);
        return {
            propertiesToSend,
        };
    });
}
exports.fetchObjectContext = fetchObjectContext;
function isMaybeWrongAccessToken(err) {
    /**
     * Our code controls the `objectTypeId` and `objectId` that are
     * passed to the execution service from the record page where the
     * extension is loaded. So when we get a 400 error for
     * `objectTypeId` being invalid or a 404 error for
     * `objectId` being not found, it is more likely that the
     * access token is for the wrong portal. We also include 401 errors
     * for this check as that's a clear indication of something wrong
     * with the access token.
     */
    return [400, 401, 404].includes(err.code);
}
function getCrmObjectByHubSpotApiClient(accessToken, basePath, objectTypeId, objectId, propertyNames) {
    return __awaiter(this, void 0, void 0, function* () {
        const hubspotClient = new api_client_1.Client({
            accessToken,
            basePath,
        });
        return yield hubspotClient.crm.objects.basicApi.getById(objectTypeId, String(objectId), propertyNames);
    });
}
function buildContext(config, localExecutionInputs, secrets) {
    return __awaiter(this, void 0, void 0, function* () {
        const { objectQuery, parameters, event } = localExecutionInputs;
        const objectContext = yield fetchObjectContext(config, objectQuery, secrets === null || secrets === void 0 ? void 0 : secrets.PRIVATE_APP_ACCESS_TOKEN);
        return Object.assign({ propertiesToSend: {}, parameters,
            event,
            secrets }, objectContext);
    });
}
exports.buildContext = buildContext;
//# sourceMappingURL=context.js.map