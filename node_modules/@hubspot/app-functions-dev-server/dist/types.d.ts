import { PLATFORM_VERSION } from './constants';
export interface AppFunctionsManifest {
    runtime: string;
    version: string;
    appFunctions: {
        [name: string]: FunctionDeclaration;
    };
}
interface FunctionDeclaration {
    /** relative path to the function source file */
    file: string;
    /** list of secret names */
    secrets: string[];
}
export interface MultiFunctionInfo {
    srcDir: string;
    distDir?: string;
    appFunctions: {
        [name: string]: FunctionDeclaration;
    };
}
export interface SingleFunctionInfo {
    srcDir: string;
    distDir?: string;
    /** name of the app function */
    name: string;
    /** relative path to the function source file */
    file: string;
    /** list of secret names */
    secrets: string[];
}
export type PlatformVersion = (typeof PLATFORM_VERSION)[keyof typeof PLATFORM_VERSION];
export interface ServiceConfiguration {
    accountId: number;
    app: ApplicationInfo;
    functionTimeoutMs: number;
    hubspotApiOrigin: string;
    hubspotWebsiteOrigin: string;
    logger: Pick<typeof console, 'debug' | 'info' | 'warn' | 'error'>;
    platformVersion: PlatformVersion;
}
export interface ApplicationInfo {
    /** absolute path of the app directory (ex: "/path/to/src/app/") */
    path: string;
    /** parsed app.json */
    config?: {
        name: string;
        description: string;
        scopes: string[];
        public: boolean;
        extensions: unknown;
    };
}
/**
 * Interface for app function execution requests from UI extensions.
 * It should be consistent with the types declared in
 * - ui-extensions-remote-renderer
 * - CRMExtensibility (execution service backend)
 */
export interface ServerlessExecutionRequest {
    appId: number;
    extensibleCardId: number;
    serverlessFunction: string;
    location: ExtensionPointName;
    objectQuery?: ObjectQuery;
    parameters?: JsonValue;
    event?: {
        type: 'SERVERLESS_ACTION_HOOK';
        payload: JsonValue;
    };
    objectId?: number;
    objectTypeId?: string;
}
export interface ObjectQuery {
    objectId: number;
    objectTypeId: string;
    objectPropertyNames: string[];
}
export type ExtensionPointName = 'uie.playground.middle' | 'crm.record.tab' | 'crm.record.sidebar';
/**
 * App function signature
 */
export type AppFunction = (context: FunctionContext, sendResponse: FunctionCallback) => Promise<void>;
export type FunctionCallback = (response: JsonValue) => void;
export interface FunctionContext {
    parameters?: JsonValue;
    event?: {
        type: 'SERVERLESS_ACTION_HOOK';
        payload: JsonValue;
    };
    propertiesToSend?: {
        [name: string]: unknown;
    };
    secrets?: {
        [name: string]: string;
    } & {
        PRIVATE_APP_ACCESS_TOKEN?: string;
    };
}
export interface ApiException extends Error {
    code: number;
}
export declare function isApiException(err: unknown): err is ApiException;
export type JsonValue = string | number | boolean | null | JsonValue[] | {
    [key: string]: JsonValue;
};
export interface LocalExecutionInputs {
    appId?: number;
    objectQuery?: ServerlessExecutionRequest['objectQuery'];
    parameters?: ServerlessExecutionRequest['parameters'];
    event?: ServerlessExecutionRequest['event'];
}
export {};
