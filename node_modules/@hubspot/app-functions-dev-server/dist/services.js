"use strict";
/* hs-eslint ignored failing-rules */
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppFunctionExecutionService = void 0;
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const executor_1 = require("./executor");
const config_1 = require("./config");
const errors_1 = require("./errors");
const AppFunctionExecutionService = (partialConfig) => {
    const config = setupConfig(partialConfig);
    const { logger } = config;
    const app = (0, express_1.default)();
    app.use((0, cors_1.default)());
    app.use(express_1.default.json());
    app.post('/action/function/:appId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
        const appId = Number(req.params.appId);
        const request = req.body;
        const { serverlessFunction: functionName, objectQuery, parameters, event, } = request;
        const onSuccess = (response = null) => {
            logger.debug(`${new Date().toISOString()} - App function "${functionName}" execution succeeded`);
            res.status(200).json({ logId: 'n/a', response });
        };
        try {
            yield (0, executor_1.executeFunction)(config, functionName, { appId, objectQuery, parameters, event }, onSuccess);
        }
        catch (err) {
            if (err instanceof errors_1.ExecutionError) {
                const response = (0, errors_1.buildBadRequestBody)(err);
                logger.warn(`${new Date().toISOString()} - App function "${functionName}" execution failed`);
                res.status(400).json(response);
            }
            else {
                const response = (0, errors_1.buildInternalErrorBody)();
                logger.error(err);
                logger.warn(`${new Date().toISOString()} - App function "${functionName}" execution failed due to server internal error`);
                res.status(500).json(response);
            }
        }
    }));
    return app;
};
exports.AppFunctionExecutionService = AppFunctionExecutionService;
function setupConfig(partialConfig) {
    var _a;
    if (!((_a = partialConfig.app) === null || _a === void 0 ? void 0 : _a.path)) {
        throw new Error('Cannot instantiate app function execution service: Path to the application directory is missing');
    }
    const { app: { path: appPath } } = partialConfig, rest = __rest(partialConfig, ["app"]);
    return (0, config_1.buildServiceConfiguration)(appPath, rest);
}
//# sourceMappingURL=services.js.map