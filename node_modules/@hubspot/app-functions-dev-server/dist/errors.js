"use strict";
/* hs-eslint ignored failing-rules */
/* eslint-disable hubspot-dev/no-unsupported-ts-syntax */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildInternalErrorBody = exports.buildBadRequestBody = exports.ExecutionError = exports.Reason = void 0;
const utils_1 = require("./utils");
exports.Reason = {
    Timeout: 'TIMEOUT',
    UncaughtError: 'UNCAUGHT_ERROR',
    InvalidResponse: 'INVALID_RESPONSE',
    InvalidFunction: 'INVALID_FUNCTION',
    FunctionNotFound: 'FUNCTION_NOT_FOUND',
};
class ExecutionError extends Error {
    constructor(details) {
        super();
        this.details = details;
        this.reason = details.reason;
        this.cause = details.cause;
    }
}
exports.ExecutionError = ExecutionError;
const ERROR_BUILDERS = {
    [exports.Reason.Timeout]: buildServerlessFunctionError_timeout,
    [exports.Reason.UncaughtError]: buildServerlessFunctionError_uncaughtError,
    [exports.Reason.InvalidResponse]: buildServerlessFunctionError_nonJsonResponse,
    [exports.Reason.InvalidFunction]: buildServerlessFunctionError_mainNotFound,
    [exports.Reason.FunctionNotFound]: buildServerlessFunctionError_functionNotFound,
};
function buildBadRequestBody({ details }) {
    var _a;
    const error = (_a = ERROR_BUILDERS[details.reason]) === null || _a === void 0 ? void 0 : _a.call(ERROR_BUILDERS, details);
    return {
        status: 'error',
        message: "There was a problem reaching the app's API. Contact the app developer for more information.",
        correlationId: 'n/a',
        errors: error ? [error] : [],
        category: 'VALIDATION_ERROR',
        subCategory: 'GenXExecutionErrorType.APP_ERROR',
    };
}
exports.buildBadRequestBody = buildBadRequestBody;
function buildInternalErrorBody() {
    return {
        status: 'error',
        message: 'internal error',
        correlationId: 'n/a',
    };
}
exports.buildInternalErrorBody = buildInternalErrorBody;
function buildServerlessFunctionError_timeout({ functionName, elapsedTimeMs, }) {
    const timestamp = new Date().toJSON(); // Ex: '2023-07-21T13:20:39.657Z'
    const functionId = 'n/a';
    const elapsedTime = elapsedTimeMs
        ? (0, utils_1.formatSeconds)(elapsedTimeMs, 2)
        : 'n/a seconds';
    const errorMessage = `${timestamp} ${functionId} Task timed out after ${elapsedTime}`;
    return buildServerlessFunctionError(functionName, errorMessage);
}
function buildServerlessFunctionError_uncaughtError({ functionName, cause, }) {
    const errorMessage = cause ? `${cause}` : '';
    return buildServerlessFunctionError(functionName, errorMessage);
}
function buildServerlessFunctionError_nonJsonResponse({ functionName, }) {
    const errorMessage = 'Wrong arguments';
    return buildServerlessFunctionError(functionName, errorMessage);
}
function buildServerlessFunctionError_mainNotFound({ functionName, }) {
    const errorMessage = 'customerPayload.main is not a function';
    return buildServerlessFunctionError(functionName, errorMessage);
}
function buildServerlessFunctionError_functionNotFound({ functionName, appId = 0, }) {
    // TODO improve server side error
    const errorMessage = `com.hubspot.apicaller.exceptions.ApiFailure: Api[name=app-functions-executor-client, httpMethod=POST, subPath=/v1/app/${appId}/function/${functionName}] Failed to process your request. Error code was '400'. Error message was:\n{"status":"error","message":"The serverless function ${functionName} doesn't exist in this project. Go to the Activity tab for the project to check its deploy status.","correlationId":"bd3bc53f-db78-4c60-9713-b8a98a6303d4","context":{"SERVERLESS_FUNCTION":["${functionName}"]},"category":"VALIDATION_ERROR","subCategory":"AppFunctionsExecutorErrorType.SERVERLESS_FUNCTION_NOT_FOUND"}`;
    return buildServerlessFunctionError(functionName, errorMessage);
}
function buildServerlessFunctionError(functionName, errorMessage) {
    return {
        subCategory: 'ServerlessActionExecutionError.SERVERLESS_FUNCTION_ERROR',
        message: `The serverless function '${functionName}' failed to execute: ${errorMessage}.`,
        context: {
            exception: [errorMessage],
            logId: ['n/a'],
            appFunctionLogId: ['n/a'],
            serverlessFunction: [functionName],
        },
    };
}
//# sourceMappingURL=errors.js.map