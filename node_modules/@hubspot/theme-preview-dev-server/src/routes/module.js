"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildModuleRouteHandler = void 0;
const http_1 = __importDefault(require("@hubspot/local-dev-lib/http"));
const designManager_js_1 = require("../api/designManager.js");
const previewUtils_js_1 = require("../previewUtils.js");
const logger_1 = require("@hubspot/local-dev-lib/logger");
const buildModuleRouteHandler = (sessionInfo) => {
    const { accountId, sessionToken } = sessionInfo;
    return async (req, res) => {
        (0, previewUtils_js_1.trackPreviewEvent)('view-module-route');
        const { modulePath } = req.params;
        if (!modulePath) {
            res.status(200).set({ 'Content-Type': 'text/html' }).end(buildModuleIndex());
            return;
        }
        const calculatedPath = `@preview/${sessionToken}/${modulePath}.module`;
        let customWidgetInfo;
        try {
            customWidgetInfo = await (0, designManager_js_1.fetchModulesByPath)(accountId, calculatedPath);
        }
        catch (err) {
            logger_1.logger.error(`Failed to fetch module preview for ${calculatedPath}`);
        }
        if (!customWidgetInfo || !('moduleId' in customWidgetInfo && 'previewKey' in customWidgetInfo)) {
            res.status(200).set({ 'Content-Type': 'text/html' }).end(buildErrorIndex());
            return;
        }
        const params = {
            module_id: customWidgetInfo.moduleId,
            hs_preview_key: customWidgetInfo.previewKey,
            updated: Date.now(),
            ...req.query
        };
        const previewUrl = new URL((0, previewUtils_js_1.getPreviewUrl)(sessionInfo, params));
        const result = await http_1.default.get(accountId, {
            baseURL: previewUrl.origin,
            url: previewUrl.pathname,
            params,
        });
        const html = (0, previewUtils_js_1.addRefreshScript)(result);
        res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
    };
};
exports.buildModuleRouteHandler = buildModuleRouteHandler;
const buildErrorIndex = () => (0, previewUtils_js_1.buildHTMLResponse)(`
  <div>
    <h2>Error</h2>
    <p>Failed to fetch module data.</p>
  </div>
`);
const buildModuleIndex = () => (0, previewUtils_js_1.buildHTMLResponse)(`
  <div>
    <h2>Module</h2>
    <p>Please provide a module path in the request</p>
  </div>
`);
