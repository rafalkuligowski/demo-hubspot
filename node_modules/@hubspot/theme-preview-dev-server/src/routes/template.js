"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTemplateRouteHandler = void 0;
const http_1 = __importDefault(require("@hubspot/local-dev-lib/http"));
const designManager_1 = require("../api/designManager");
const previewUtils_js_1 = require("../previewUtils.js");
const logger_1 = require("@hubspot/local-dev-lib/logger");
const buildTemplateRouteHandler = (sessionInfo) => {
    const { accountId, sessionToken } = sessionInfo;
    return async (req, res) => {
        const { templatePath } = req.params;
        if (!templatePath) {
            res.status(200).set({ 'Content-Type': 'text/html' }).end(buildTemplateIndex());
            return;
        }
        const calculatedPath = `@preview/${sessionToken}/${templatePath}`;
        let templateInfo;
        try {
            templateInfo = await (0, designManager_1.fetchTemplatesByPath)(accountId, calculatedPath);
        }
        catch (err) {
            logger_1.logger.error(`Failed to fetch template info for ${calculatedPath}: ${err}`);
        }
        if (!templateInfo || !('previewKey' in templateInfo)) {
            res.status(502).set({ 'Content-Type': 'text/html' }).end(buildErrorIndex());
            return;
        }
        const params = {
            template_file_path: calculatedPath,
            hs_preview_key: templateInfo.previewKey,
            ...req.query
        };
        const previewUrl = new URL((0, previewUtils_js_1.getPreviewUrl)(sessionInfo, params));
        const result = await http_1.default.get(accountId, {
            baseURL: previewUrl.origin,
            url: previewUrl.pathname,
            params,
        });
        const html = (0, previewUtils_js_1.addRefreshScript)(result);
        res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
    };
};
exports.buildTemplateRouteHandler = buildTemplateRouteHandler;
const buildErrorIndex = () => (0, previewUtils_js_1.buildHTMLResponse)(`
  <div>
    <h2>Error</h2>
    <p>Failed to fetch template data.</p>
  </div>
`);
const buildTemplateIndex = () => (0, previewUtils_js_1.buildHTMLResponse)(`
  <div>
    <h2>Template</h2>
    <p>Please provide a template path in the request</p>
  </div>
`);
