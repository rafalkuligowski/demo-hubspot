"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyPageResourceRedirect = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const logger_1 = require("@hubspot/local-dev-lib/logger");
const previewUtils_js_1 = require("../previewUtils.js");
const proxyPageResourceRedirect = async (req, res, next) => {
    const isAHtmlRequest = req.accepts().includes('text/html');
    if ((isAHtmlRequest && !(0, previewUtils_js_1.isInternalCMSRoute)(req)) ||
        previewUtils_js_1.VALID_PROXY_DOMAIN_SUFFIXES.includes(req.hostname)) {
        next();
        return;
    }
    const domainToProxy = (0, previewUtils_js_1.getSubDomainFromValidLocalDomain)(req.hostname);
    const pathToProxy = req.originalUrl;
    const urlToProxy = `https://${domainToProxy}${pathToProxy}`;
    if (req.method === 'GET') {
        const response = await (0, node_fetch_1.default)(urlToProxy)
            .then((response) => response.text())
            .catch((err) => logger_1.logger.error(`Failed to proxy resource: ${urlToProxy} ${err}`));
        res.status(200).end(response);
        return;
    }
    else {
        const contentType = req.headers['content-type'];
        const isSendingJSON = contentType && /\bjson\b/.test(req.headers['content-type'].toString());
        const headerEntries = Object.entries(req.headers).filter(([header]) => 
        // Need to reset these headers for https (and recompression/encoding?) to work properly
        !['host', 'origin', 'connection', 'content-length'].includes(header.toLowerCase()) &&
            !header.startsWith('sec-'));
        let body;
        if (req.body) {
            if (isSendingJSON) {
                body = JSON.stringify(req.body);
            }
            else {
                body = req.body.toString();
            }
        }
        const result = await (0, node_fetch_1.default)(urlToProxy, {
            method: req.method,
            // @ts-ignore
            headers: headerEntries,
            body,
        }).then((response) => response.text())
            .catch((err) => logger_1.logger.error(`Failed to fetch resource ${urlToProxy}`));
        res.status(200).send(result);
        return;
    }
};
exports.proxyPageResourceRedirect = proxyPageResourceRedirect;
