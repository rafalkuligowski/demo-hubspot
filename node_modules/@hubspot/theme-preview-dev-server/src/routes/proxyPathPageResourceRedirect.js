"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyPathPageResourceRedirect = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const previewUtils_js_1 = require("../previewUtils.js");
const logger_1 = require("@hubspot/local-dev-lib/logger");
const proxyPathPageResourceRedirect = async (req, res, next) => {
    const isAHtmlRequest = req.accepts().includes('text/html');
    // proxy when referer's path is /proxy and has page query param
    let proxyPageUrl;
    let refererUrl;
    try {
        refererUrl = new URL(req.headers.referer);
        const page = refererUrl.searchParams.get('page');
        if (!page)
            throw "";
        proxyPageUrl = new URL(page);
    }
    catch (e) {
        next();
        return;
    }
    if (!refererUrl.pathname.startsWith('/proxy')) {
        next();
        return;
    }
    // handle anchor links unless internal CMS route
    if (isAHtmlRequest && !(0, previewUtils_js_1.isInternalCMSRoute)(req)) {
        const encodedPageUrl = encodeURIComponent(`${proxyPageUrl.origin}${req.url}`);
        res.redirect(`/proxy?page=${encodedPageUrl}`);
        return;
    }
    const urlToProxy = `https://${proxyPageUrl.host}${req.url}`;
    const result = await (0, node_fetch_1.default)(urlToProxy)
        .then((response) => response.text())
        .catch((err) => logger_1.logger.error(`Failed to fetch resource ${urlToProxy}`));
    res.status(200).send(result);
    return;
};
exports.proxyPathPageResourceRedirect = proxyPathPageResourceRedirect;
