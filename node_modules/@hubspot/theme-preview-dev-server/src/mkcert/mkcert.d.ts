export class Mkcert {
    /**
     *
     * @param {{ force?: boolean, keyFilePath: string, certFilePath: string }} options
     */
    constructor(options: {
        force?: boolean | undefined;
        keyFilePath: string;
        certFilePath: string;
    });
    force: boolean;
    mkcertSavedPath: string;
    source: GithubSource;
    KEY_FILE_PATH: string;
    CERT_FILE_PATH: string;
    getMkcertBinary(): Promise<string | undefined>;
    /**
     * Check if mkcert exists
     */
    checkMkcert(): boolean;
    getCertificate(): Promise<{
        key: Buffer;
        cert: Buffer;
    }>;
    /**
     * @param {string[]} hosts
     */
    createCertificate(hosts: string[]): Promise<void>;
    getCurrentMkcertVersion: () => Promise<string | null>;
    /**
     * @param {string[]} hosts
     */
    regenerate(hosts: string[]): Promise<void>;
    init(): Promise<void>;
    getSourceInfo(): Promise<{
        downloadUrl: string;
        version: string;
    } | undefined>;
    initMkcert(): Promise<void>;
    /**
     *
     * @param {string} sourceUrl
     * @param {string} distPath
     */
    downloadMkcert(sourceUrl: string, distPath: string): Promise<void>;
    /**
     * @param {string[]} hosts
     */
    renew(hosts: string[]): Promise<void>;
    /**
     * Get certificates
     *
     * @param {string[]} hosts host collection
     * @returns certificates
     */
    install(hosts: string[]): Promise<{
        key: Buffer;
        cert: Buffer;
    }>;
}
import { GithubSource } from './source.js';
