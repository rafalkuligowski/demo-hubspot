"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPreviewServerRoutes = void 0;
const express_1 = require("express");
const index_js_1 = require("./routes/index.js");
const module_js_1 = require("./routes/module.js");
const template_js_1 = require("./routes/template.js");
const meta_js_1 = require("./routes/meta.js");
const proxyPathPageRouteHandler_js_1 = require("./routes/proxyPathPageRouteHandler.js");
const proxyPageRouteHandler_js_1 = require("./routes/proxyPageRouteHandler.js");
const proxyPathPageResourceRedirect_js_1 = require("./routes/proxyPathPageResourceRedirect.js");
const proxyPageResourceRedirect_js_1 = require("./routes/proxyPageResourceRedirect.js");
const createPreviewServerRoutes = async (sessionInfo) => {
    const previewServerRouter = (0, express_1.Router)();
    previewServerRouter.get('/proxy', (0, proxyPathPageRouteHandler_js_1.buildProxyRouteHandler)(sessionInfo));
    previewServerRouter.get('/module/:modulePath(*)', (0, module_js_1.buildModuleRouteHandler)(sessionInfo));
    previewServerRouter.get('/template/:templatePath(*)', (0, template_js_1.buildTemplateRouteHandler)(sessionInfo));
    // fetches server metadata from the client (used by refresh script to check if fs has been changed)
    previewServerRouter.get('/meta', (0, meta_js_1.buildMetaRouteHandler)(sessionInfo));
    // handles resources on the proxied page, so a fetch from relative path gets proxied too
    previewServerRouter.get('/*', proxyPathPageResourceRedirect_js_1.proxyPathPageResourceRedirect);
    previewServerRouter.get('/*', proxyPageResourceRedirect_js_1.proxyPageResourceRedirect);
    previewServerRouter.post('/*', proxyPageResourceRedirect_js_1.proxyPageResourceRedirect);
    previewServerRouter.delete('/*', proxyPageResourceRedirect_js_1.proxyPageResourceRedirect);
    previewServerRouter.head('/*', proxyPageResourceRedirect_js_1.proxyPageResourceRedirect);
    previewServerRouter.put('/*', proxyPageResourceRedirect_js_1.proxyPageResourceRedirect);
    previewServerRouter.options('/*', proxyPageResourceRedirect_js_1.proxyPageResourceRedirect);
    previewServerRouter.get('/*', (0, proxyPageRouteHandler_js_1.buildProxyPageRouteHandler)(sessionInfo));
    // index route
    previewServerRouter.get('/', (0, index_js_1.buildIndexRouteHandler)(sessionInfo));
    return previewServerRouter;
};
exports.createPreviewServerRoutes = createPreviewServerRoutes;
