"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSprocketMenuServer = void 0;
const net_1 = __importDefault(require("net"));
const express_1 = __importDefault(require("express"));
const express_2 = require("express");
const cors_1 = __importDefault(require("cors"));
const logger_1 = require("@hubspot/local-dev-lib/logger");
const SPROCKET_MENU_PORT = 1442;
const startSprocketMenuServer = async (sessionInfo) => {
    const portIsTaken = await new Promise((res, rej) => {
        const testNetServer = net_1.default.createServer();
        testNetServer.once('error', (err) => {
            if (err['code'] === 'EADDRINUSE') {
                logger_1.logger.error(`Port ${SPROCKET_MENU_PORT} is in use. HubSpot will be unable to automatically create proxy links in the Sprocket Menu`);
                res(true);
            }
            else {
                rej(err);
            }
        });
        testNetServer.once('listening', () => {
            testNetServer.close();
        });
        testNetServer.once('close', () => {
            res(false);
        });
        testNetServer.listen(SPROCKET_MENU_PORT);
    });
    if (portIsTaken) {
        return;
    }
    const sprocketMenuServer = (0, express_1.default)();
    sprocketMenuServer.listen(SPROCKET_MENU_PORT);
    sprocketMenuServer.use('/', await createSprocketMenuServerRoutes(sessionInfo));
};
exports.startSprocketMenuServer = startSprocketMenuServer;
const createSprocketMenuServerRoutes = async (sessionInfo) => {
    const sprocketMenuServerRoutes = (0, express_2.Router)();
    sprocketMenuServerRoutes.get('/check-if-local-dev-server', (0, cors_1.default)(), sprocketMenuServerCheckHandler(sessionInfo));
    return sprocketMenuServerRoutes;
};
const sprocketMenuServerCheckHandler = (sessionInfo) => async (req, res) => {
    const { PORT } = sessionInfo;
    const { query } = req;
    if (query) {
        const { hostName, pathName, } = query;
        let hasJSBuildingBlocks = false;
        let localProxyUrl = `http://${hostName}.hslocal.net:${PORT}${pathName}`;
        res
            .status(200)
            .set({ 'Content-Type': 'application/json' })
            .json({ hasJSBuildingBlocks, localProxyUrl });
    }
    ;
};
