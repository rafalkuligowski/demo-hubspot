"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwApiUploadError = exports.throwApiError = exports.getAxiosErrorWithContext = exports.parseValidationErrors = exports.isSpecifiedHubSpotAuthError = exports.isApiUploadValidationError = exports.isTimeoutError = exports.isGatingError = exports.isMissingScopeError = exports.isSpecifiedError = void 0;
const api_1 = require("../constants/api");
const lang_1 = require("../utils/lang");
const standardErrors_1 = require("./standardErrors");
const i18nKey = 'errors.apiErrors';
function isSpecifiedError(err, { statusCode, category, subCategory, errorType, code, }) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const error = (err && err.cause) || err;
    const statusCodeErr = !statusCode || error.response?.status === statusCode;
    const categoryErr = !category || error.response?.data?.category === category;
    const subCategoryErr = !subCategory || error.response?.data?.subCategory === subCategory;
    const errorTypeErr = !errorType || error.response?.data?.errorType === errorType;
    const codeError = !code || error.code === code;
    return (error.isAxiosError &&
        statusCodeErr &&
        categoryErr &&
        subCategoryErr &&
        errorTypeErr &&
        codeError);
}
exports.isSpecifiedError = isSpecifiedError;
function isMissingScopeError(err) {
    return isSpecifiedError(err, { statusCode: 403, category: 'MISSING_SCOPES' });
}
exports.isMissingScopeError = isMissingScopeError;
function isGatingError(err) {
    return isSpecifiedError(err, { statusCode: 403, category: 'GATED' });
}
exports.isGatingError = isGatingError;
function isTimeoutError(err) {
    return isSpecifiedError(err, { code: 'ETIMEDOUT' });
}
exports.isTimeoutError = isTimeoutError;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isApiUploadValidationError(err) {
    return (err.isAxiosError &&
        (err.status === 400 || err.response?.status === 400) &&
        !!err.response &&
        !!(err.response?.data?.message || !!err.response?.data?.errors));
}
exports.isApiUploadValidationError = isApiUploadValidationError;
function isSpecifiedHubSpotAuthError(err, { status, category, subCategory }) {
    const statusCodeErr = !status || err.status === status;
    const categoryErr = !category || err.category === category;
    const subCategoryErr = !subCategory || err.subCategory === subCategory;
    return Boolean(err.name === 'HubSpotAuthError' &&
        statusCodeErr &&
        categoryErr &&
        subCategoryErr);
}
exports.isSpecifiedHubSpotAuthError = isSpecifiedHubSpotAuthError;
function parseValidationErrors(responseData = { errors: [], message: '' }) {
    const errorMessages = [];
    const { errors, message } = responseData;
    if (message) {
        errorMessages.push(message);
    }
    if (errors) {
        const specificErrors = errors.map(error => {
            let errorMessage = error.message;
            if (error.errorTokens && error.errorTokens.line) {
                errorMessage = `line ${error.errorTokens.line}: ${errorMessage}`;
            }
            return errorMessage;
        });
        errorMessages.push(...specificErrors);
    }
    return errorMessages;
}
exports.parseValidationErrors = parseValidationErrors;
/**
 * @throws
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function throwValidationError(error) {
    const validationErrorMessages = parseValidationErrors(error?.response?.data);
    if (validationErrorMessages.length) {
        return new Error(validationErrorMessages.join(' '), { cause: error });
    }
}
function getAxiosErrorWithContext(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
error, context = {}) {
    const { status } = error;
    const method = error.config?.method;
    const { projectName } = context;
    let messageDetail;
    if (context.accountId) {
        const action = (method && api_1.HTTP_METHOD_VERBS[method]) || api_1.HTTP_METHOD_VERBS.get;
        const preposition = (method && api_1.HTTP_METHOD_PREPOSITIONS[method]) ||
            api_1.HTTP_METHOD_PREPOSITIONS.get;
        const requestName = context.request
            ? `${action} ${preposition} '${context.request}'`
            : action;
        messageDetail = (0, lang_1.i18n)(`${i18nKey}.messageDetail`, {
            accountId: context.accountId,
            requestName,
        });
    }
    else {
        messageDetail = (0, lang_1.i18n)(`${i18nKey}.genericMessageDetail`);
    }
    const errorMessage = [];
    if ((method === 'put' || method === 'post') && context.payload) {
        errorMessage.push((0, lang_1.i18n)(`${i18nKey}.unableToUpload`, { payload: context.payload }));
    }
    const isProjectMissingScopeError = isMissingScopeError(error) && projectName;
    const isProjectGatingError = isGatingError(error) && projectName;
    switch (status) {
        case 400:
            errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.400`, { messageDetail }));
            break;
        case 401:
            errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.401`, { messageDetail }));
            break;
        case 403:
            if (isProjectMissingScopeError) {
                errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.403ProjectMissingScope`, {
                    accountId: context.accountId || '',
                }));
            }
            else if (isProjectGatingError) {
                errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.403ProjectGating`, {
                    accountId: context.accountId || '',
                }));
            }
            else {
                errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.403`, { messageDetail }));
            }
            break;
        case 404:
            errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.404`, { messageDetail }));
            break;
        case 429:
            errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.429`, { messageDetail }));
            break;
        case 503:
            errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.503`, { messageDetail }));
            break;
        default:
            if (status && status >= 500 && status < 600) {
                errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.500Generic`, { messageDetail }));
            }
            else if (status && status >= 400 && status < 500) {
                errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.400Generic`, { messageDetail }));
            }
            else {
                errorMessage.push((0, lang_1.i18n)(`${i18nKey}.codes.generic`, { messageDetail }));
            }
            break;
    }
    if (error?.response?.data) {
        const { message, errors } = error.response.data;
        if (message && !isProjectMissingScopeError && !isProjectGatingError) {
            errorMessage.push(message);
        }
        if (errors) {
            errors.forEach((err) => {
                if (err.message) {
                    errorMessage.push('\n- ' + err.message);
                }
            });
        }
    }
    return new Error(errorMessage.join(' '), { cause: error });
}
exports.getAxiosErrorWithContext = getAxiosErrorWithContext;
/**
 * @throws
 */
function throwApiError(error, context = {}) {
    if (error.isAxiosError) {
        throw getAxiosErrorWithContext(error, context);
    }
    (0, standardErrors_1.throwError)(error);
}
exports.throwApiError = throwApiError;
function throwApiUploadError(error, context = {}) {
    if (isApiUploadValidationError(error)) {
        throwValidationError(error);
    }
    throwApiError(error, context);
}
exports.throwApiUploadError = throwApiUploadError;
