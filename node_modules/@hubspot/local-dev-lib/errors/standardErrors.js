"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwError = exports.throwAuthErrorWithMessage = exports.throwErrorWithMessage = exports.isFatalError = exports.isSystemError = void 0;
const HubSpotAuthError_1 = require("../models/HubSpotAuthError");
const lang_1 = require("../utils/lang");
function isSystemError(err) {
    return err.errno != null && err.code != null && err.syscall != null;
}
exports.isSystemError = isSystemError;
function isFatalError(err) {
    return err instanceof HubSpotAuthError_1.HubSpotAuthError;
}
exports.isFatalError = isFatalError;
function genericThrowErrorWithMessage(ErrorType, identifier, interpolation, cause) {
    const message = (0, lang_1.i18n)(identifier, interpolation);
    if (cause) {
        throw new ErrorType(message, { cause });
    }
    throw new ErrorType(message);
}
/**
 * @throws
 */
function throwErrorWithMessage(identifier, interpolation, cause) {
    genericThrowErrorWithMessage(Error, identifier, interpolation, cause);
}
exports.throwErrorWithMessage = throwErrorWithMessage;
/**
 * @throws
 */
function throwAuthErrorWithMessage(identifier, interpolation, cause) {
    genericThrowErrorWithMessage(
    // @ts-expect-error HubSpotAuthError is not callable
    HubSpotAuthError_1.HubSpotAuthError, identifier, interpolation, cause);
}
exports.throwAuthErrorWithMessage = throwAuthErrorWithMessage;
/**
 * @throws
 */
function throwError(error) {
    // Error or Error subclass
    const message = error.name && error.name !== 'Error'
        ? [(0, lang_1.i18n)('errors.generic', { name: error.name })]
        : [];
    [error.message, error.reason].forEach(msg => {
        if (msg) {
            message.push(msg);
        }
    });
    throw new Error(message.join(' '), { cause: error });
}
exports.throwError = throwError;
