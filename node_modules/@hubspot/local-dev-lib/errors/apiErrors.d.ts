import { AxiosError } from 'axios';
import { GenericError, AxiosErrorContext, ValidationError } from '../types/Error';
import { HubSpotAuthError } from '../models/HubSpotAuthError';
export declare function isSpecifiedError(err: Error | AxiosError, { statusCode, category, subCategory, errorType, code, }: {
    statusCode?: number;
    category?: string;
    subCategory?: string;
    errorType?: string;
    code?: string;
}): boolean;
export declare function isMissingScopeError(err: Error | AxiosError): boolean;
export declare function isGatingError(err: Error | AxiosError): boolean;
export declare function isTimeoutError(err: Error | AxiosError): boolean;
export declare function isApiUploadValidationError(err: AxiosError<any>): boolean;
export declare function isSpecifiedHubSpotAuthError(err: GenericError, { status, category, subCategory }: Partial<HubSpotAuthError>): boolean;
export declare function parseValidationErrors(responseData?: {
    errors?: Array<ValidationError>;
    message?: string;
}): Array<string>;
export declare function getAxiosErrorWithContext(error: AxiosError<any>, context?: AxiosErrorContext): Error;
/**
 * @throws
 */
export declare function throwApiError(error: AxiosError, context?: AxiosErrorContext): never;
export declare function throwApiUploadError(error: AxiosError, context?: AxiosErrorContext): never;
