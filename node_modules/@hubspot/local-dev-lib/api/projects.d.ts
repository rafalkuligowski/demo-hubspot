/// <reference types="node" />
import { QueryParams } from '../types/Http';
import { Project, FetchProjectResponse, UploadProjectResponse, ProjectSettings } from '../types/Project';
import { Build, FetchProjectBuildsResponse } from '../types/Build';
import { ComponentMetadataResponse, ComponentStructureResponse } from '../types/ComponentStructure';
import { Deploy, ProjectDeployResponse } from '../types/Deploy';
export declare function fetchProjects(accountId: number): Promise<FetchProjectResponse>;
export declare function createProject(accountId: number, name: string): Promise<Project>;
export declare function uploadProject(accountId: number, projectName: string, projectFile: string, uploadMessage: string, platformVersion?: string): Promise<UploadProjectResponse>;
export declare function fetchProject(accountId: number, projectName: string): Promise<Project>;
export declare function downloadProject(accountId: number, projectName: string, buildId: number): Promise<Buffer>;
export declare function deleteProject(accountId: number, projectName: string): Promise<void>;
type FetchPlatformVersionResponse = {
    defaultPlatformVersion: string;
    activePlatformVersions: Array<string>;
};
export declare function fetchPlatformVersions(accountId: number): Promise<FetchPlatformVersionResponse>;
export declare function fetchProjectBuilds(accountId: number, projectName: string, params?: QueryParams): Promise<FetchProjectBuildsResponse>;
export declare function getBuildStatus(accountId: number, projectName: string, buildId: number): Promise<Build>;
export declare function getBuildStructure(accountId: number, projectName: string, buildId: number): Promise<ComponentStructureResponse>;
export declare function deployProject(accountId: number, projectName: string, buildId: number): Promise<ProjectDeployResponse>;
export declare function getDeployStatus(accountId: number, projectName: string, deployId: number): Promise<Deploy>;
export declare function getDeployStructure(accountId: number, projectName: string, deployId: number): Promise<ComponentStructureResponse>;
export declare function fetchProjectSettings(accountId: number, projectName: string): Promise<ProjectSettings>;
export declare function fetchDeployComponentsMetadata(accountId: number, projectId: number): Promise<ComponentMetadataResponse>;
export declare function provisionBuild(accountId: number, projectName: string, platformVersion?: string): Promise<Build>;
export declare function queueBuild(accountId: number, projectName: string, platformVersion?: string): Promise<void>;
export declare function uploadFileToBuild(accountId: number, projectName: string, filePath: string, path: string): Promise<void>;
export declare function deleteFileFromBuild(accountId: number, projectName: string, path: string): Promise<void>;
export declare function cancelStagedBuild(accountId: number, projectName: string): Promise<void>;
export {};
