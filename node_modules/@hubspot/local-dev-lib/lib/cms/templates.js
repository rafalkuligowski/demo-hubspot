"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTemplate = exports.isCodedFile = exports.getAnnotationValue = exports.ANNOTATION_KEYS = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const github_1 = require("../github");
const standardErrors_1 = require("../../errors/standardErrors");
const logger_1 = require("../logging/logger");
const lang_1 = require("../../utils/lang");
const i18nKey = 'lib.cms.templates';
// Matches the .html file extension, excluding module.html
const TEMPLATE_EXTENSION_REGEX = new RegExp(/(?<!module)\.html$/);
// Matches an annotation value, ending at space, newline, or end of string
const ANNOTATION_VALUE_REGEX = ':\\s?([\\S|\\s]*?)(\n|$)';
exports.ANNOTATION_KEYS = {
    isAvailableForNewContent: 'isAvailableForNewContent',
    templateType: 'templateType',
    label: 'label',
    screenshotPath: 'screenshotPath',
    // 'description' is specific to Sections
    description: 'description',
};
function getAnnotationValue(annotations, key) {
    const valueRegex = new RegExp(`${key}${ANNOTATION_VALUE_REGEX}`);
    const match = annotations.match(valueRegex);
    return match ? match[1].trim() : null;
}
exports.getAnnotationValue = getAnnotationValue;
/*
 * Returns true if:
 * .html extension (ignoring module.html)
 */
function isCodedFile(filePath) {
    return TEMPLATE_EXTENSION_REGEX.test(filePath);
}
exports.isCodedFile = isCodedFile;
const ASSET_PATHS = {
    'page-template': 'templates/page-template.html',
    partial: 'templates/partial.html',
    'global-partial': 'templates/global-partial.html',
    'email-template': 'templates/email-template.html',
    'blog-listing-template': 'templates/blog-listing-template.html',
    'blog-post-template': 'templates/blog-post-template.html',
    'search-template': 'templates/search-template.html',
    section: 'templates/section.html',
};
async function createTemplate(name, dest, type = 'page-template', options = { allowExisting: false }) {
    const assetPath = ASSET_PATHS[type];
    const filename = name.endsWith('.html') ? name : `${name}.html`;
    const filePath = path_1.default.join(dest, filename);
    if (!options.allowExisting && fs_extra_1.default.existsSync(filePath)) {
        (0, standardErrors_1.throwErrorWithMessage)(`${i18nKey}.createTemplate.errors.pathExists`, {
            path: filePath,
        });
    }
    logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.createTemplate.creatingPath`, { path: dest }));
    fs_extra_1.default.mkdirp(dest);
    logger_1.logger.log((0, lang_1.i18n)(`${i18nKey}.createTemplate.creatingFile`, {
        path: filePath,
    }));
    await (0, github_1.downloadGithubRepoContents)('HubSpot/cms-sample-assets', assetPath, filePath);
}
exports.createTemplate = createTemplate;
