"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAbsoluteFilePath = exports.isAllowedExtension = exports.getAllowedExtensions = exports.getExt = exports.getCwd = exports.splitHubSpotPath = exports.splitLocalPath = exports.convertToLocalFileSystemPath = exports.convertToUnixPath = void 0;
const path_1 = __importDefault(require("path"));
const unixify_1 = __importDefault(require("unixify"));
const extensions_1 = require("../constants/extensions");
function convertToUnixPath(_path) {
    return (0, unixify_1.default)(path_1.default.normalize(_path));
}
exports.convertToUnixPath = convertToUnixPath;
function convertToWindowsPath(_path) {
    const rgx = new RegExp(`\\${path_1.default.posix.sep}`, 'g');
    return path_1.default.normalize(_path).replace(rgx, path_1.default.win32.sep);
}
function convertToLocalFileSystemPath(_path) {
    switch (path_1.default.sep) {
        case path_1.default.posix.sep:
            return convertToUnixPath(_path);
        case path_1.default.win32.sep:
            return convertToWindowsPath(_path);
        default:
            return path_1.default.normalize(_path);
    }
}
exports.convertToLocalFileSystemPath = convertToLocalFileSystemPath;
function removeTrailingSlashFromSplits(parts) {
    if (parts.length > 1 && parts[parts.length - 1] === '') {
        return parts.slice(0, parts.length - 1);
    }
    return parts;
}
// Splits a filepath for local file system sources.
function splitLocalPath(filepath, pathImplementation = path_1.default) {
    if (!filepath)
        return [];
    const { sep } = pathImplementation;
    const rgx = new RegExp(`\\${sep}+`, 'g');
    const parts = pathImplementation.normalize(filepath).split(rgx);
    // Restore posix root if present
    if (sep === path_1.default.posix.sep && parts[0] === '') {
        parts[0] = '/';
    }
    return removeTrailingSlashFromSplits(parts);
}
exports.splitLocalPath = splitLocalPath;
// Splits a filepath for remote sources (HubSpot).
function splitHubSpotPath(filepath) {
    if (!filepath)
        return [];
    const rgx = new RegExp(`\\${path_1.default.posix.sep}+`, 'g');
    const parts = convertToUnixPath(filepath).split(rgx);
    // Restore root if present
    if (parts[0] === '') {
        parts[0] = '/';
    }
    return removeTrailingSlashFromSplits(parts);
}
exports.splitHubSpotPath = splitHubSpotPath;
function getCwd() {
    if (process.env.INIT_CWD) {
        return process.env.INIT_CWD;
    }
    return process.cwd();
}
exports.getCwd = getCwd;
function getExt(filepath) {
    if (typeof filepath !== 'string')
        return '';
    const ext = path_1.default.extname(filepath).trim().toLowerCase();
    return ext[0] === '.' ? ext.slice(1) : ext;
}
exports.getExt = getExt;
function getAllowedExtensions(allowList = []) {
    return new Set([...Array.from(extensions_1.ALLOWED_EXTENSIONS), ...allowList]);
}
exports.getAllowedExtensions = getAllowedExtensions;
function isAllowedExtension(filepath, allowList = []) {
    const ext = getExt(filepath);
    const allowedExtensions = getAllowedExtensions(allowList);
    return allowedExtensions.has(ext);
}
exports.isAllowedExtension = isAllowedExtension;
function getAbsoluteFilePath(_path) {
    return path_1.default.resolve(getCwd(), _path);
}
exports.getAbsoluteFilePath = getAbsoluteFilePath;
