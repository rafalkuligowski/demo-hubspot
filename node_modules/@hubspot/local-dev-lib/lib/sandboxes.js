"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTypes = exports.fetchTaskStatus = exports.initiateSync = exports.getSandboxUsageLimits = exports.deleteSandbox = exports.createSandbox = void 0;
const sandboxHubs_1 = require("../api/sandboxHubs");
const sandboxSync_1 = require("../api/sandboxSync");
const apiErrors_1 = require("../errors/apiErrors");
async function createSandbox(accountId, name, type) {
    try {
        const resp = await (0, sandboxHubs_1.createSandbox)(accountId, name, type);
        return {
            name,
            ...resp,
        };
    }
    catch (err) {
        (0, apiErrors_1.throwApiError)(err);
    }
}
exports.createSandbox = createSandbox;
async function deleteSandbox(parentAccountId, sandboxAccountId) {
    try {
        await (0, sandboxHubs_1.deleteSandbox)(parentAccountId, sandboxAccountId);
    }
    catch (err) {
        (0, apiErrors_1.throwApiError)(err);
    }
    return {
        parentAccountId,
        sandboxAccountId,
    };
}
exports.deleteSandbox = deleteSandbox;
async function getSandboxUsageLimits(parentAccountId) {
    try {
        const resp = await (0, sandboxHubs_1.getSandboxUsageLimits)(parentAccountId);
        return resp && resp.usage;
    }
    catch (err) {
        (0, apiErrors_1.throwApiError)(err);
    }
}
exports.getSandboxUsageLimits = getSandboxUsageLimits;
async function initiateSync(fromHubId, toHubId, tasks, sandboxHubId) {
    try {
        return await (0, sandboxSync_1.initiateSync)(fromHubId, toHubId, tasks, sandboxHubId);
    }
    catch (err) {
        (0, apiErrors_1.throwApiError)(err);
    }
}
exports.initiateSync = initiateSync;
async function fetchTaskStatus(accountId, taskId) {
    try {
        return await (0, sandboxSync_1.fetchTaskStatus)(accountId, taskId);
    }
    catch (err) {
        (0, apiErrors_1.throwApiError)(err);
    }
}
exports.fetchTaskStatus = fetchTaskStatus;
async function fetchTypes(accountId, toHubId) {
    try {
        const resp = await (0, sandboxSync_1.fetchTypes)(accountId, toHubId);
        return resp && resp.results;
    }
    catch (err) {
        (0, apiErrors_1.throwApiError)(err);
    }
}
exports.fetchTypes = fetchTypes;
