"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAndAddConfigToGitignore = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const git_1 = require("../utils/git");
const config_1 = require("../constants/config");
const standardErrors_1 = require("../errors/standardErrors");
const i18nKey = 'lib.gitignore';
const GITIGNORE_FILE = '.gitignore';
function checkAndAddConfigToGitignore(configPath) {
    try {
        const { configIgnored, gitignoreFiles } = (0, git_1.checkGitInclusion)(configPath);
        if (configIgnored)
            return;
        let gitignoreFilePath = gitignoreFiles && gitignoreFiles.length ? gitignoreFiles[0] : null;
        if (!gitignoreFilePath) {
            gitignoreFilePath = path_1.default.resolve(configPath, GITIGNORE_FILE);
            (0, fs_extra_1.writeFileSync)(gitignoreFilePath, '');
        }
        const gitignoreContents = (0, fs_extra_1.readFileSync)(gitignoreFilePath).toString();
        const updatedContents = `${gitignoreContents.trim()}\n\n# HubSpot config file\n${config_1.DEFAULT_HUBSPOT_CONFIG_YAML_FILE_NAME}\n`;
        (0, fs_extra_1.writeFileSync)(gitignoreFilePath, updatedContents);
    }
    catch (e) {
        (0, standardErrors_1.throwErrorWithMessage)(`${i18nKey}.errors.configIgnore`, {}, e);
    }
}
exports.checkAndAddConfigToGitignore = checkAndAddConfigToGitignore;
