"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAndUpdateGitignore = exports.checkAndWarnGitInclusion = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const git_1 = require("../../utils/git");
const logger_1 = require("./logger");
const lang_1 = require("../../utils/lang");
const config_1 = require("../../constants/config");
const GITIGNORE_FILE = '.gitignore';
const i18nKey = 'lib.logging.git';
function checkAndWarnGitInclusion(configPath) {
    try {
        const { inGit, configIgnored } = (0, git_1.checkGitInclusion)(configPath);
        if (!inGit || configIgnored)
            return;
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.securityIssue`));
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.configFileTracked`));
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.fileName`, { configPath }));
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.remediate`));
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.moveConfig`, { homeDir: os_1.default.homedir() }));
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.addGitignore`, { configPath }));
        logger_1.logger.warn((0, lang_1.i18n)(`${i18nKey}.noRemote`));
    }
    catch (e) {
        // fail silently
        logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.checkFailed`));
    }
}
exports.checkAndWarnGitInclusion = checkAndWarnGitInclusion;
function checkAndUpdateGitignore(configPath) {
    try {
        const { configIgnored, gitignoreFiles } = (0, git_1.checkGitInclusion)(configPath);
        if (configIgnored)
            return;
        let gitignoreFilePath = gitignoreFiles && gitignoreFiles.length ? gitignoreFiles[0] : null;
        if (!gitignoreFilePath) {
            gitignoreFilePath = path_1.default.resolve(configPath, GITIGNORE_FILE);
            fs_extra_1.default.writeFileSync(gitignoreFilePath, '');
        }
        const gitignoreContents = fs_extra_1.default.readFileSync(gitignoreFilePath).toString();
        const updatedContents = `${gitignoreContents.trim()}\n\n# HubSpot config file\n${config_1.DEFAULT_HUBSPOT_CONFIG_YAML_FILE_NAME}\n`;
        fs_extra_1.default.writeFileSync(gitignoreFilePath, updatedContents);
    }
    catch (e) {
        // fail silently
        logger_1.logger.debug((0, lang_1.i18n)(`${i18nKey}.checkFailed`));
    }
}
exports.checkAndUpdateGitignore = checkAndUpdateGitignore;
