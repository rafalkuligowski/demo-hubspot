import { FlatAccountFields, TokenInfo } from '../types/Accounts';
import { Environment } from '../types/Config';
type OAuth2ManagerAccountConfig = {
    name?: string;
    accountId?: number;
    clientId?: string;
    clientSecret?: string;
    scopes?: Array<string>;
    env?: Environment;
    environment?: Environment;
    tokenInfo?: TokenInfo;
    authType?: 'oauth2';
};
type WriteTokenInfoFunction = (tokenInfo: TokenInfo) => void;
type RefreshTokenResponse = {
    refresh_token: string;
    access_token: string;
    expires_in: string;
};
type ExchangeProof = {
    grant_type: string;
    client_id?: string;
    client_secret?: string;
    refresh_token?: string;
};
declare class OAuth2Manager {
    account: OAuth2ManagerAccountConfig;
    writeTokenInfo?: WriteTokenInfoFunction;
    refreshTokenRequest: Promise<RefreshTokenResponse> | null;
    constructor(account: OAuth2ManagerAccountConfig, writeTokenInfo?: WriteTokenInfoFunction);
    accessToken(): Promise<string | undefined>;
    fetchAccessToken(exchangeProof: ExchangeProof): Promise<void>;
    exchangeForTokens(exchangeProof: ExchangeProof): Promise<void>;
    refreshAccessToken(): Promise<void>;
    static fromConfig(accountConfig: FlatAccountFields, writeTokenInfo: WriteTokenInfoFunction): OAuth2Manager;
}
export default OAuth2Manager;
